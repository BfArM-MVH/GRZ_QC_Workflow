/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    BfArM-MVH/GRZ_QC_Workflow Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    submission       = null
    samplesheet      = null

    // References
    reference_path   = null
    thresholds       = "${projectDir}/assets/default_files/thresholds.json"

    // Output options
    outdir           = null
    publish_dir_mode = 'copy'

    genomes {
        GRCh37 {
            fasta = "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg19/Sequence/WholeGenomeFasta/genome.fa"
            targets = "${projectDir}/assets/default_files/hg19_439_omim_genes.bed"
            name_map = "${projectDir}/assets/default_files/hg19_NCBI2UCSC.txt"
        }
        GRCh38 {
            fasta = "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg38/Sequence/WholeGenomeFasta/genome.fa"
            targets = "${projectDir}/assets/default_files/hg38_440_omim_genes.bed"
            name_map = "${projectDir}/assets/default_files/hg38_NCBI2UCSC.txt"
        }
    }
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        conda.cacheDir          = "${projectDir}/.conda_cache"
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        conda.cacheDir          = "${projectDir}/.conda_cache"
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
    }
    slurm {
        process {
            // Picked from the options above
            executor   = 'slurm'

            // The queue directory allows you to set the queue where jobs are scheduled when using a grid based executor
            // queue      = 'standard'

            // Additional options passed to 'sbatch'
            // clusterOptions = '--no-requeue'
        }
    }

    grzqc_GRCh38 { includeConfig 'conf/grzqc_GRCh38.config'      }
    grzqc_GRCh37 { includeConfig 'conf/grzqc_GRCh37.config'      }
    test_GRCh38  { includeConfig 'conf/tests/test_GRCh38.config' }
    test_GRCh37  { includeConfig 'conf/tests/test_GRCh37.config' }
    test_full    { includeConfig 'conf/tests/test_full.config'   }
    test_sarek   { includeConfig 'conf/tests/test_sarek.config'  }
    test_panel   { includeConfig 'conf/tests/test_panel.config'  }
    test_wgs     { includeConfig 'conf/tests/test_wgs.config'    }
}

// Set default registry for Apptainer, Docker, Podman, Charliecloud and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Charliecloud / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry    = 'quay.io'
docker.registry       = 'quay.io'
podman.registry       = 'quay.io'
singularity.registry  = 'quay.io'
charliecloud.registry = 'quay.io'

// Set bash options
process.shell = """\
bash

set -e # Exit if a tool returns a non-zero status/exit code
set -u # Treat unset variables and parameters as an error
set -o pipefail # Returns the status of the last command to exit with a non-zero status or zero if all successfully execute
set -C # No clobber - prevent output redirection from overwriting files.
"""

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'BfArM-MVH/GRZ_QC_Workflow'
    author          = """Yun Wang, Kuebra Narci, Shounak Chakraborty, Florian Hoelzlwimmer"""
    homePage        = 'https://github.com/BfArM-MVH/GRZ_QC_Workflow'
    description     = """Quality Control pipeline for 2% of data that will be submitted to the GRZ: Map and calculate coverage"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=24.04.2'
    version         = '1.0.0dev'
}

// Nextflow plugins
plugins {
    id 'nf-schema@2.1.1' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

validation {
    help {
        enabled = true
        command = "nextflow run $manifest.name -profile <docker/singularity/conda> --submission path/to/submission/ --outdir <OUTDIR>"
        fullParameter = "help_full"
        showHiddenParameter = "show_hidden"
    }
    defaultIgnoreParams = ["genomes", "thresholds"]
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'
