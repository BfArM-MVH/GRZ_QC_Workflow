{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/grzqc/master/assets/schema_input.json",
    "title": "BfArM-MVH/GRZ_QC_Workflow pipeline - params.input schema",
    "description": "Schema for the file provided with params.input",
    "type": "array",
    "items": {
        "type": "object",
        "properties": {
            "sample": {
                "oneOf": [
                    {
                        "type": "string",
                        "pattern": "^\\S+$"
                    },
                    {
                        "type": "number"
                    }
                ],
                "errorMessage": "Sample name must be provided and cannot contain spaces",
                "meta": ["id"]
            },
            "labDataName": {
                "type": "string",
                "meta": ["labDataName"]
            },
            "laneId": {
                "oneOf": [
                    {
                        "type": "string",
                        "pattern": "^\\S+$"
                    },
                    {
                        "type": "number"
                    }
                ],
                "meta": ["laneId"]
            },
            "libraryType": {
                "type": "string",
                "pattern": "panel|wgs|wes|panel_lr|wgs_lr|wes_lr",
                "errorMessage": "Library type must be one of the followings: panel, wgs, wes, panel_lr, wgs_lr, wes_lr",
                "meta": ["libraryType"]
            },
            "sequenceSubtype": {
                "type": "string",
                "pattern": "somatic|germline",
                "errorMessage": "Library type must be either somatic or germline",
                "meta": ["sequenceSubtype"]
            },
            "genomicStudySubtype": {
                "type": "string",
                "pattern": "tumor\\+germline|tumor-only|germline-only",
                "errorMessage": "Library type must be either tumor+germline, tumor-only or germline-only",
                "meta": ["genomicStudySubtype"]
            },
            "sequencerManufacturer": {
                "type": "string",
                "errorMessage": "Sequencer manufacturer",
                "meta": ["sequencer"]
            },
            "flowcellId": {
                "type": "string",
                "errorMessage": "Sequencer manufacturer",
                "meta": ["flowcellId"]
            },
            "fastq_1": {
                "type": "string",
                "format": "file-path",
                "exists": true,
                "pattern": "^\\S+\\.f(ast)?q\\.gz$",
                "errorMessage": "FastQ file for reads 1 must be provided, cannot contain spaces and must have extension '.fq.gz' or '.fastq.gz'"
            },
            "fastq_2": {
                "type": "string",
                "format": "file-path",
                "exists": true,
                "pattern": "^\\S+\\.f(ast)?q\\.gz$",
                "errorMessage": "FastQ file for reads 2 cannot contain spaces and must have extension '.fq.gz' or '.fastq.gz'"
            },
            "aligned_reads": {
                "type": "string",
                "format": "file-path",
                "exists": true,
                "pattern": "\\S+\\.(bam|cram)$",
                "errorMessage": "Aligned reads BAM or CRAM, cannot contain spaces and must have extension '.bam' or '.cram'"
            },
            "fastp_json": {
                "type": "string",
                "format": "file-path",
                "exists": true,
                "pattern": "\\S+\\.(json)$",
                "errorMessage": "fastp JSON report from reads in alignment",
                "meta": ["fastp_json"]
            },
            "bed_file": {
                "type": "string",
                "format": "file-path",
                "exists": true,
                "pattern": "^\\S+\\.bed(\\.gz)?$",
                "errorMessage": "Target bed file",
                "meta": ["bed_file"]
            },
            "reference": {
                "type": "string",
                "pattern": "GRCh38|GRCh37",
                "errorMessage": "The reference genome has to be either GRCh37 or GRCh38",
                "meta": ["reference"]
            }
        },
        "anyOf": [
            {
                "dependentRequired": {
                    "id": ["fastq_1"]
                }
            },
            {
                "dependentRequired": {
                    "id": ["aligned_reads"]
                }
            }
        ],
        "dependentRequired": {
            "fastq_2": ["fastq_1"],
            "fastp_json": ["aligned_reads"]
        },
        "required": ["sample"]
    }
}
